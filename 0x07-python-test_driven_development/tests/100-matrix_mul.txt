Module that multiplies 2 matrices
=================================

Includes 'matrix_mul()' function:

	 >>> m = __import__('100-matrix_mul')
	 >>> m.matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	 [[7, 10], [15, 22]]
	 >>> m.matrix_mul('hello', [[4, 6, 7], [2, 7, 4]])
	 Traceback (most recent call last):
	 TypeError: m_a must be a list
	 >>> m.matrix_mul([[1, 2], [4, 5]], (4, 6, 2))
	 Traceback (most recent call last):
	 TypeError: m_b must be a list
	 >>> m.matrix_mul([4, 7.4, 2, 6.8], [[4, 6, 7], [2, 7, 4]])
	 Traceback (most recent call last):
	 TypeError: m_a must be a list of lists
	 >>> m.matrix_mul([[4, 6], [2, 7]], [2, 4,5, 0.8])
	 Traceback (most recent call last):
	 TypeError: m_b must be a list of lists
	 >>> m.matrix_mul([[]], [[4, 6], [2, 7]])
	 Traceback (most recent call last):
	 ValueError: m_a can't be empty
	 >>> m.matrix_mul([[4, 6], [2, 7]], [])
	 Traceback (most recent call last):
	 ValueError: m_b can't be empty
	 >>> m.matrix_mul([[1, '2'], [3, 4]], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 TypeError: m_a should contain only integers or floats
	 >>> m.matrix_mul([[1, 2], [3, 4]], [[1, 2], [False, 4]])
	 Traceback (most recent call last):
	 TypeError: m_b should contain only integers or floats
	 >>> m.matrix_mul([[1, 3, 7.5], [3.5, 7]], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 TypeError: each row of m_a must be of the same size
	 >>> m.matrix_mul([[1, 7.5], [3.5, 7]], [[1, 2], [3, 5, 4]])
	 Traceback (most recent call last):
	 TypeError: each row of m_b must be of the same size
	 >>> m.matrix_mul([[4.7, 3, 6], [1, 8, 3.2]], [[2, 7.1, 4], [1, 22, 3]])
	 Traceback (most recent call last):
	 ValueError: m_a and m_b can't be multiplied
	 >>> m.matrix_mul([[4.7, 3, 6], [1, 8, 3.2]])
	 Traceback (most recent call last):
	 TypeError: matrix_mul() missing 1 required positional argument: 'm_b'
	 >>> m.matrix_mul()
	 Traceback (most recent call last):
	 TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
